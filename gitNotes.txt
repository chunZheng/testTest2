/////Distributed version control systems

In order to create a repo, you need to creat an account on git hub.  Though there is a visual interface for it, it's apparently frowned upon and you should use the cmd lines instead.

Here are the following commands:
git status: This compares what's different between your computer's repo and the master.
git add: [fileName] or -A
git commit: -m "add log msg here": locks all your 'adds' into the local repo. (You have a copy of your local distributed repo and push your repo to the master repo as necessary)
git push: pushes it into the master repo.
git pull: pulls from the master
git log:gets you info about what you commited locally

misc notes:
merge conflict issues:  It'll just say you made a mistake.  It will separate the lines into two sections:HEAD or other person.  Make the edits and then just re-commit.

If you ever get into the situation where you lose control of the cmd line.  You can press [esc] and then ':wq'.

Like general repo tips.  You would normally do a git pull at the start of your day.


=======================================================================
This makes usage of the keyword branch.

Do we need to create our own individual branches?

There are situations where your code will be reviewed so it won't be merged with the master right away.  This is assuming that you create a separate branch.
*You can see what branch you are using if you are using git bash.
-Get the most recent version of master:
git branch: sees all the branches.
git branch feature1: creates a new branch called feature1. (dups your current one)
git checkout feature1: switches to the feature1 branch from your current one.

Then you can do every cmd from above.
git merge master.(this is pushing into the master, if you do have a push; it's synonymous to 'git push'?)
If it's successful, then you can create a "pull request" on the site.  Then you can click on "Merge Pull Request" to actually have it be part of the branch.
===============================================================================

///////////////
Few things I will need to look into it:
-revert back to a specific version
-delete certain files.

/////
Try hard to not work on the same files.

two approaches to conflict control:
-copy-modify-merge:general issue that happens where the user will be prompt an error if you are trying to overwrite someone else's work.
-lock-modify-unlock(not supported by distributed version controls systems, doesn't exist in git(warn about this issue.)), it was generally done svnTortoise with FLAs.